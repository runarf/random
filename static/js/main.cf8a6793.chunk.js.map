{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CheckboxGroup","Checkbox","Group","App","useState","allOptions","setAllOptions","currentlyChecked","setCurrentlyChecked","candidates","setCandidates","indeterminate","isAllChecked","state","setState","inputText","setInputText","randomPerson","setRandomPerson","useEffect","savedCheckedOptionsJson","localStorage","getItem","savedCheckedOptions","JSON","parse","savedAllOptionsJson","savedAllOptions","join","console","log","length","allOptionsJson","stringify","setItem","currentlyCheckedJson","Content","Layout","style","height","justify","title","href","GithubOutlined","width","margin","onChange","e","target","checked","options","value","checkedValues","placeholder","event","inputTextAllOptions","split","map","text","trim","onPressEnter","disabled","onClick","localCandidates","array","Math","floor","random","difference","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf8a6793.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Checkbox, Input, Button, Row, Layout, Card, Col } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport difference from \"lodash/difference\";\nimport Title from \"antd/lib/typography/Title\";\nimport { GithubOutlined } from \"@ant-design/icons\";\n\nconst CheckboxGroup = Checkbox.Group;\n\ninterface State {\n  indeterminate: boolean;\n  isAllChecked: boolean;\n}\n\nconst SAVED_CHECKED_OPTIONS = \"savedCheckedOptions\";\nconst SAVED_ALL_OPTIONS = \"savedAllOptions\";\nconst App = () => {\n  const [allOptions, setAllOptions] = useState<string[]>([]);\n  const [currentlyChecked, setCurrentlyChecked] = useState<CheckboxValueType[]>(\n    []\n  );\n  const [candidates, setCandidates] = useState<CheckboxValueType[]>([]);\n  const [state, setState] = useState<State>({\n    indeterminate: true,\n    isAllChecked: false,\n  });\n\n  const [inputText, setInputText] = useState(\"\");\n\n  const [randomPerson, setRandomPerson] = useState(\"\");\n\n  useEffect(() => {\n    const savedCheckedOptionsJson =\n      localStorage.getItem(SAVED_CHECKED_OPTIONS) ?? \"[]\";\n    const savedCheckedOptions = JSON.parse(\n      savedCheckedOptionsJson\n    ) as CheckboxValueType[];\n\n    setCurrentlyChecked(savedCheckedOptions);\n\n    const savedAllOptionsJson = localStorage.getItem(SAVED_ALL_OPTIONS) ?? \"[]\";\n    const savedAllOptions = JSON.parse(savedAllOptionsJson);\n    setAllOptions(savedAllOptions);\n    const inputText = savedAllOptions.join(\", \");\n    console.log(inputText);\n    setInputText(inputText);\n\n    if (savedAllOptions.length === savedCheckedOptions.length) {\n      setState({ indeterminate: false, isAllChecked: true });\n    } else if (savedCheckedOptions.length === 0) {\n      setState({ indeterminate: false, isAllChecked: false });\n    }\n  }, []);\n\n  useEffect(() => {\n    const allOptionsJson = JSON.stringify(allOptions);\n\n    localStorage.setItem(SAVED_ALL_OPTIONS, allOptionsJson);\n\n    const currentlyCheckedJson = JSON.stringify(currentlyChecked);\n    localStorage.setItem(SAVED_CHECKED_OPTIONS, currentlyCheckedJson);\n\n    setCandidates(currentlyChecked);\n  }, [currentlyChecked, allOptions]);\n\n  const onClickCheckbox = (checkedValues: CheckboxValueType[]) => {\n    const indeterminate =\n      checkedValues.length > 0 && checkedValues.length < allOptions.length;\n    setState({\n      indeterminate,\n      isAllChecked: checkedValues.length === allOptions.length,\n    });\n    setCurrentlyChecked(checkedValues);\n  };\n\n  const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const inputText = event.target.value;\n    setInputText(inputText);\n\n    const inputTextAllOptions = inputText.split(\",\").map((text) => text.trim());\n\n    setAllOptions(inputTextAllOptions);\n  };\n\n  const onCheckMasterChange = (e: CheckboxChangeEvent) => {\n    const isAllChecked = e.target.checked;\n    setState({\n      indeterminate: false,\n      isAllChecked: isAllChecked,\n    });\n    setCurrentlyChecked(isAllChecked ? allOptions : []);\n  };\n\n  const getRandomElement = (array: CheckboxValueType[]) =>\n    array[Math.floor(Math.random() * array.length)];\n\n  const onClickButton = () => {\n    let localCandidates: CheckboxValueType[];\n    if (candidates.length > 0) {\n      localCandidates = candidates;\n    } else {\n      console.log(\"restart\");\n      localCandidates = currentlyChecked;\n    }\n    const randomPerson = getRandomElement(localCandidates) as string;\n    setRandomPerson(randomPerson);\n    setCandidates(difference(localCandidates, [randomPerson]));\n  };\n\n  const { Content } = Layout;\n  return (\n    <Layout style={{ height: \"100vh\" }}>\n      <Content>\n        <Row justify=\"center\">\n          <Card\n            title={\n              <Row justify=\"space-between\">\n                <Col>Get a random person</Col>\n                <Col>\n                  <a href=\"https://github.com/runarf/random/blob/master/src/App.tsx#L106\">\n                    <GithubOutlined />\n                  </a>\n                </Col>\n              </Row>\n            }\n            style={{ width: \"80vw\", margin: \"12px\" }}\n          >\n            <Row justify=\"center\">\n              <Checkbox\n                indeterminate={state.indeterminate}\n                onChange={onCheckMasterChange}\n                checked={state.isAllChecked}\n              >\n                Check all\n              </Checkbox>\n            </Row>\n            <Row justify=\"center\">\n              <CheckboxGroup\n                options={allOptions}\n                value={currentlyChecked}\n                onChange={onClickCheckbox}\n              />\n            </Row>\n            <Row>\n              <Input\n                placeholder=\"Input comma separated list of people\"\n                onChange={onChangeInput}\n                value={inputText}\n                onPressEnter={() => setInputText(inputText + \", \")}\n              />\n            </Row>\n            <br />\n            <Row justify=\"center\">\n              <Button\n                disabled={allOptions.length < 2 && currentlyChecked.length < 2}\n                onClick={onClickButton}\n              >\n                Get Random\n              </Button>\n            </Row>\n            <br />\n            <Row justify=\"center\">\n              <Title>{randomPerson}</Title>\n            </Row>\n          </Card>\n        </Row>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}